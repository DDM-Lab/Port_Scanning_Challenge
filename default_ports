#!/usr/bin/env python3
import random


def simulate_port_scan(ports):
    """
    Simulate a port scan by returning all ports as open.
    """
    return sorted(ports)


def format_nmap_output(open_ports, scanned_ports):
    """
    Formats and displays output similar to an Nmap scan.
    Every port in the scanned list is shown with its state
    (which will be "open" for all ports in this version) and its corresponding service.
    """
    print("\nNmap scan report:")
    print(f"Ports scanned: {len(scanned_ports)}")
    print("Starting Nmap 7.80 ( https://nmap.org ) at 2024-11-29 02:00 EST\n")
    print("PORT     STATE   SERVICE")
    services = {
        22: "ssh",
        80: "http",
        443: "https",
        8080: "http-alt",
        31337: "elite",
        65432: "unknown"
    }
    for port in scanned_ports:
        state = "open" if port in open_ports else "closed"
        service = services.get(port, "unknown")
        print(f"{port:<8} {state:<7} {service}")
    print("\nNmap done: 1 IP address (1 host up) scanned")


def connect_to_port(port, encoded_parts, connected_ports):
    """
    Connects to a specified port and reveals an encoded part if available.
    If the port hasn't been connected before and an encoded part exists,
    the part is popped from the list and displayed.
    """
    if port not in connected_ports and encoded_parts:
        connected_ports.append(port)
        encoded_part = encoded_parts.pop(0)
        part_number = len(connected_ports)
        print(f"\nConnected to port {port}")
        print(f"Encoded part {part_number} of 4 found: {encoded_part}")
        
        if part_number == 1:
            print("\nMilestone: You found the first encoded part!")
        elif part_number == 4:
            print("\nMilestone: You found all encoded parts!")
            return True
    elif port in connected_ports:
        print(f"\nAlready connected to port {port}. No new encoded parts.")
    else:
        print(f"\nConnected to port {port}, but no new encoded parts found.")
    
    return False


def analyze_text(encoded_text):
    """
    Simulates analyzing the complete encoded text.
    """
    print("\nNow it's time to analyze the encoded text and find the flag!")
    print(f"Encoded text: {encoded_text}")


def main():
    """
    Main function to run the Port Scanner Challenge game.
    """
    # Pre-defined encoded text (for demonstration purposes)
    encoded_text = ""
    
    # Split the encoded text into roughly equal parts
    part_length = len(encoded_text) // 4
    encoded_parts = [
        encoded_text[i:i + part_length] for i in range(0, len(encoded_text), part_length)
    ]
    
    connected_ports = []
    
    # List of ports available for scanning
    ports_to_scan = [22, 80, 443, 8080, 31337, 65432]
    
    open_ports = []  # This will be updated via simulate_port_scan
    attempted_ports = set()

    print("Welcome to the Port Scanner Challenge!")
    print("Scan ports to find open ones, then connect to reveal encoded parts.")
    print("Commands: 'scan', 'connect <port>', or 'exit'")
    
    while True:
        user_input = input("\nEnter command: ").lower().split()
        
        if not user_input:
            continue

        command = user_input[0]
        
        if command == "exit":
            break
        elif command == "scan":
            open_ports = simulate_port_scan(ports_to_scan)
            format_nmap_output(open_ports, ports_to_scan)
        elif command == "connect" and len(user_input) == 2:
            try:
                port = int(user_input[1])
                attempted_ports.add(port)
                if port in open_ports:
                    all_parts_found = connect_to_port(port, encoded_parts, connected_ports)
                    if all_parts_found:  # All parts have been revealed
                        analyze_text(encoded_text)
                        break
                else:
                    print(f"\nPort {port} is not open or hasn't been scanned yet.")
            except ValueError:
                print("Invalid port number. Please enter a valid number.")
        else:
            print("Invalid command. Use 'scan', 'connect <port>', or 'exit'.")

    # Summary of results after exiting or completing the challenge
    print("\nChallenge complete. Thanks for participating!")
    print(f"\nPorts connected: {connected_ports}")
    print("Please copy the order of the ports.")
    print(f"Total unique ports connected: {len(connected_ports)}")
    print(f"Total ports attempted: {len(attempted_ports)}")
    
    invalid_attempts = len(attempted_ports - set(ports_to_scan))
    
    print(f"Invalid ports attempted: {invalid_attempts}")


if __name__ == "__main__":
    main()
