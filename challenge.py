import random

def simulate_port_scan(ports):
    open_ports = random.sample(ports, k=random.randint(3, len(ports)))
    return sorted(open_ports)

def format_nmap_output(open_ports, total_ports):
    print("\nNmap scan report:")
    print(f"Ports scanned: {total_ports}")
    print("Starting Nmap 7.80 ( https://nmap.org ) at 2024-11-29 02:00 EST\n")
    print("PORT     STATE  SERVICE")
    services = {22: 'ssh', 80: 'http', 443: 'https', 8080: 'http-alt', 31337: 'elite', 65432: 'unknown'}
    for port in open_ports:
        service = services.get(port, 'unknown')
        print(f"{port:<8} open   {service}")
    print("\nNmap done: 1 IP address (1 host up) scanned")

def connect_to_port(port, encoded_parts, connected_ports):
    if port not in connected_ports and encoded_parts:
        connected_ports.append(port)
        encoded_part = encoded_parts.pop(0)
        print(f"\nConnected to port {port}")
        print(f"Encoded part found: {encoded_part}")
    elif port in connected_ports:
        print(f"\nAlready connected to port {port}. No new encoded parts.")
    else:
        print(f"\nConnected to port {port}, but no new encoded parts found.")

def main():
    encoded_text = ""
    encoded_parts = [encoded_text[i:i+len(encoded_text)//4] for i in range(0, len(encoded_text), len(encoded_text)//4)]
    connected_ports = []
    ports_to_scan = [22, 80, 443, 8080, 31337, 65432]
    open_ports = []
    
    print("Welcome to the Port Scanner Challenge!")
    print("Scan ports to find open ones, then connect to reveal encoded parts.")
    print("Commands: 'scan', 'connect <port>', or 'exit'")

    while True:
        user_input = input("\nEnter command: ").lower().split()
        
        if user_input[0] == 'exit':
            break
        elif user_input[0] == 'scan':
            open_ports = simulate_port_scan(ports_to_scan)
            format_nmap_output(open_ports, len(ports_to_scan))
        elif user_input[0] == 'connect' and len(user_input) == 2:
            try:
                port = int(user_input[1])
                if port in open_ports:
                    connect_to_port(port, encoded_parts, connected_ports)
                    if not encoded_parts:
                        print("\nYou've found all encoded parts. Time to analyze!")
                        analyze_text(encoded_text)
                        break
                else:
                    print(f"\nPort {port} is not open or hasn't been scanned yet.")
            except ValueError:
                print("Invalid port number. Please enter a valid number.")
        else:
            print("Invalid command. Use 'scan', 'connect <port>', or 'exit'.")

    print("\nChallenge complete. Thanks for participating!")
    print(f"\nPorts connected: {connected_ports}")
    print("Please copy the order of the ports")
    print(f"Total unique ports connected: {len(connected_ports)}")

def analyze_text(encoded_text):
    print("\nNow it's time to analyze the encoded text and find the flag!")
    print(f"Encoded text: {encoded_text}")


if __name__ == "__main__":
    main()